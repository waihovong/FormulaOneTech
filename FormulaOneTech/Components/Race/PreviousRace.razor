@inject FormulaOneTech.Services.Ergast.IErgastService _ergastService;
@using Models.Ergast;
@using FormulaOneTech.Helpers;
<div>
    @if (isLoading)
    {
        <div>Loading...</div>
    }
    else
    {
        <div class="text-[#E4EDF5] bg-opacity-60 no-scrollbar overflow-y-auto rounded-lg bg-gray-800 bg-clip-padding p-5 backdrop-blur-lg backdrop-filter">
            <div class="flex flex-col justify-between">
                <span class="flex items-center gap-4 pb-3 text-xl font-extrabold uppercase">
                    <span class="text-red-600">Round @PreviousRaceResults.Round</span>
                    <div class="flex items-baseline gap-4 text-xl font-extrabold uppercase">
                        <span>@PreviousRaceResults.RaceName</span> <span class="text-sm text-slate-600">@PreviousRaceResults.Circuit.CircuitName</span>
                    </div>
                </span>
                <div class="flex items-center gap-4 p-2 text-xl font-extrabold uppercase">
                    <button onclick="@(() => ResultsViewHandler(1))" class="border-l-0 border-r-0 border-t-0 @SelectedView(1)"> <span class="hover:text-fuchsia-600">Race Results</span></button>
                    <button onclick="@(() => ResultsViewHandler(2))" class="border-l-0 border-r-0 border-t-0 @SelectedView(2)"><span class="hover:text-fuchsia-600">Qualifying Results</span></button>
                </div>
                @if (ResultsView == 1)
                {
                    <div class="flex">
                        <table class="min-w-[625px] block whitespace-nowrap text-left text-sm font-semibold">
                            <thead class="border-b-2 dark:border-neutral-600">
                                <tr class="text-left uppercase">
                                    <th class="px-5 py-2 text-left">Pos</th>
                                    <th class="px-5 py-2 text-left">Driver</th>
                                    <th class="px-5 py-2 text-left">Team</th>
                                    <th class="px-5 py-2 text-left">Time</th>
                                    <th class="px-5 py-2 text-left">Points</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var driverResult in PreviousRaceResults.Results)
                                {
                                    <tr @onclick="(() => DriverDataClickHandler(driverResult, PreviousRaceResults, PreviousRaceResults.Results.IndexOf(driverResult)))" class="@GetRowClass(PreviousRaceResults.Results.IndexOf(driverResult)) border-b hover:bg-[#363E59] cursor-pointer dark:border-neutral-600">
                                        <td class="border-l-0 border-t-0 border-b-0 border-4 border-solid border-@driverResult.Constructor.ConstructorId px-5 py-2 text-center">
                                            @driverResult.Position
                                        </td>
                                        <td class="px-5 py-2 font-normal">
                                            @driverResult.Driver.GivenName <span class="font-bold">@driverResult.Driver.FamilyName</span>
                                        </td>
                                        <td class="px-5 py-2 font-medium">
                                            @driverResult.Constructor.Name
                                        </td>
                                        <td class="px-5 py-2">
                                            @if (driverResult.Time == null)
                                            {
                                                if (driverResult.PositionText.ToLower() == "r")
                                                {
                                                    <span>DNF</span>
                                                }
                                                else
                                                {
                                                    <span>@driverResult.Status</span>
                                                }
                                            }
                                            else
                                            {
                                                <span class="font-medium">@driverResult.Time?.time</span>
                                            }
                                        </td>
                                        <td class="px-5 py-2 text-center">
                                            @driverResult.Points
                                        </td>
                                    </tr>
                                }
                            </tbody>
                            <div class="w-full">
                                <span class="flex pt-2 text-xs font-normal">Select any driver to see their race pace.</span>
                                @if (driverSelected)
                                {
                                    <div class="flex items-center gap-2">
                                        <span class="text-xs font-normal">Driver Selected</span>
                                        <span>-</span>
                                        <span class="text-xs">@DriverGivenName @DriverFamilyname</span>
                                    </div>
                                }
                                else
                                {
                                    <div class="flex items-center gap-2">
                                        <span class="text-xs font-normal">No driver currently selected</span>
                                    </div>
                                }
                            </div>
                        </table>
                        <div class="flex w-full justify-between">
                            @if (driverSelected && LapInterval.Timings != null)
                            {
                                <FormulaOneTech.Components.Data.LapIntervalChart TimingData="LapInterval.Timings"
                                                                                 DriverData="LapInterval"
                                                                                 LapIntervalDataList="SelectedDriverRacePace"
                                                                                 DriverSelected="@driverSelected" />
                            }
                            else
                            {
                                <div class="flex w-full flex-col items-center justify-center gap-4">
                                    <div class="opacity-20 flex h-2/6 w-10/12 items-center justify-center rounded-lg bg-stone-700 p-5 backdrop-blur-sm">
                                        <span class="text-base font-bold uppercase opacity-100">Select any driver to see their race pace.</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
                else if (ResultsView == 2)
                {
                    <table class="mb-0 mt-0 block whitespace-nowrap text-left text-sm font-semibold">
                        <thead class="border-b-2 dark:border-neutral-600">
                            <tr class="text-left uppercase">
                                <th class="px-5 py-2 text-left">Pos</th>
                                <th class="px-5 py-2 text-left">Driver</th>
                                <th class="px-5 py-2 text-left">Team</th>
                                <th class="px-5 py-2 text-left">Q1</th>
                                <th class="px-5 py-2 text-left">Q2</th>
                                <th class="px-5 py-2 text-left">Q3</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var quali in PreviousQualiResults.QualifyingResults) //need to order by position
                            {
                                <tr class="border-b hover:bg-[#363E59] dark:border-neutral-600">
                                    <td class="border-l-0 border-t-0 border-b-0 border-4 border-solid border-@quali.Constructor.ConstructorId px-5 py-2 text-center">
                                        @quali.Position
                                    </td>
                                    <td class="px-5 py-2 font-normal">
                                        @quali.Driver.GivenName <span class="font-bold">@quali.Driver.FamilyName</span>
                                    </td>
                                    <td class="px-5 py-2 font-semibold">
                                        @quali.Constructor.Name
                                    </td>
                                    <td class="px-5 py-2 font-semibold @(quali.Q1 == fastestQ1 ? "text-fuchsia-500" : "")">
                                        @quali.Q1
                                    </td>
                                    <td class="px-5 py-2 font-semibold @(quali.Q2 == fastestQ2 ? "text-fuchsia-500" : "")">
                                        @quali.Q2
                                    </td>
                                    <td class="px-5 py-2 font-semibold @(quali.Q3 == fastestQ3 ? "text-fuchsia-500" : "")">
                                        @quali.Q3
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <span class="flex items-center gap-2 pt-2 text-xs font-normal">
                        <div class="w-[5px] h-[5px] rounded-full bg-fuchsia-500"></div> 
                        Indictor shows fastest driver of each qualification session
                    </span>
                }
            </div>
        </div>
    }
</div>

@code {
    public RaceMapper.RaceDto PreviousRaceResults = new RaceMapper.RaceDto();
    public RaceMapper.RaceDto PreviousQualiResults = new RaceMapper.RaceDto();
    public RaceMapper.LapIntervalDto LapInterval = new RaceMapper.LapIntervalDto();
    public Dictionary<string, RaceMapper.LapIntervalDto>? SelectedDriverRacePace = new Dictionary<string, RaceMapper.LapIntervalDto>();
    private bool isLoading = true;
    private int? highlightedRowIndex = null;

    private int ResultsView = 1;

    public string DriverGivenName = string.Empty;
    public string DriverFamilyname = string.Empty;
    public string Season = string.Empty;
    public string Round = string.Empty;
    public string DriverCode = string.Empty;

    private string fastestQ1 = string.Empty;
    private string fastestQ2 = string.Empty;
    private string fastestQ3 = string.Empty;

    public bool driverSelected = false;

    protected override async Task OnInitializedAsync()
    {
        PreviousRaceResults = await GetPreviousRace();
        if (PreviousRaceResults != null)
        {
            PreviousQualiResults = await GetPreviousRaceQualiResults();
            isLoading = false;
        }
    }

    /// <summary>
    /// Show/Hides race result and qualifying results
    /// 1 = Race Results
    /// 2 = Qualifying Results
    /// </summary>
    /// <param name="resultsView"></param>
    private void ResultsViewHandler(int resultsView)
    {
        ResultsView = resultsView;
    }


    /// <summary>
    /// Gets the previous Race Results
    /// </summary>
    /// <returns></returns>
    private async Task<RaceMapper.RaceDto> GetPreviousRace()
    {
        var previousRace = await _ergastService.GetPreviousRaceResults();
        return previousRace;
    }

    /// <summary>
    /// Gets the previous Race Qualification Results
    /// </summary>
    /// <returns></returns>
    private async Task<RaceMapper.RaceDto> GetPreviousRaceQualiResults()
    {
        var qualiResults = await _ergastService.GetPreviousQualiResults(PreviousRaceResults.Season, PreviousRaceResults.Round);
        List<string>? fastestQ1Driver = qualiResults?.QualifyingResults?.Select(d => d.Q1)?.ToList();
        List<string>? fastestQ2Driver = qualiResults?.QualifyingResults?.Select(d => d.Q2)?.ToList();
        List<string>? fastestQ3Driver = qualiResults?.QualifyingResults?.Select(d => d.Q3)?.ToList();

        fastestQ1 = fastestQ1Driver.OrderBy(time => Common.ConvertToDecimalMinutes(time)).FirstOrDefault();
        fastestQ2 = fastestQ2Driver.OrderBy(time => Common.ConvertToDecimalMinutes(time)).FirstOrDefault();
        fastestQ3 = fastestQ3Driver.OrderBy(time => Common.ConvertToDecimalMinutes(time)).FirstOrDefault();

        return qualiResults;
    }

    /// <summary>
    /// Handles onclick event on driver table for previous race results
    /// </summary>
    /// <param name="result"></param>
    /// <param name="race"></param>
    public async void DriverDataClickHandler(Models.Ergast.Result result, RaceMapper.RaceDto race, int rowIndex)
    {
        driverSelected = true;

        if (driverSelected)
        {
            HandleSelectedDriverClick(rowIndex);
        }

        if (PreviousRaceResults != null)
        {
            DriverCode = result.Driver.DriverId;
            DriverFamilyname = result.Driver.FamilyName;
            DriverGivenName = result.Driver.GivenName;
            Season = race.Season;
            Round = race.Round;

            LapInterval = await GetSelectedDriverData(DriverCode, Season, Round);

            var listKey = DriverCode;
            if (LapInterval != null && !SelectedDriverRacePace.ContainsKey(listKey))
            {
                SelectedDriverRacePace.Add(listKey, LapInterval);
            }


            //if driver selected then set to true and update?
            //else do nothing?

            ReinitializeGraph();
        }
    }

    /// <summary>
    /// Gets the selected drivers race data
    /// </summary>
    /// <param name="driverCode"></param>   
    /// <param name="season"></param>
    /// <param name="round"></param>
    /// <returns></returns>
    private async Task<RaceMapper.LapIntervalDto> GetSelectedDriverData(string driverCode, string season, string round)
    {
        var lapInterval = await _ergastService.GetSelectedDriverRacePace(DriverCode, Season, Round);
        return lapInterval;
    }

    /// <summary>
    /// Redraws the graph when selecting a new driver
    /// </summary>
    private void ReinitializeGraph()
    {
        driverSelected = false;
        StateHasChanged();

        Task.Delay(1).ContinueWith(_ =>
        {
            driverSelected = true;
            InvokeAsync(StateHasChanged);
        });
    }

    private void HandleSelectedDriverClick(int index)
    {
        GetTableRow(index);
        GetRowClass(index);
    }

    private void GetTableRow(int index)
    {
        highlightedRowIndex = index;
    }

    private string GetRowClass(int index)
    {
        return highlightedRowIndex == index ? "bg-stone-700" : "";
    }

    private string SelectedView(int resultView)
    {
        return ResultsView == resultView ? "border-red-700 border-2 border-solid text-red-600" : "text-gray-500";
    }

}
