@inject FormulaOneTech.Services.Ergast.IErgastService _ergastService;
@using Models.Ergast;
@using FormulaOneTech.Helpers;
@inject FormulaOneTech.Services.Circuit.ImageMappingService _mapper;

<div class="text-[#E4EDF5]">
    @if (isLoading)
    {
        <div>Loading...</div>
    }
    else
    {

        <div class="no-scrollbar border-8 bg-opacity-60 border-r-0 border-b-0 border-l-0 overflow-y-auto rounded-lg border-red-700 border-t-red-700 bg-gray-800 bg-clip-padding p-5 backdrop-blur-lg backdrop-filter">
            <div class="grid-cols-2 grid gap-2">
                <div class="flex flex-col gap-1">
                    <div class="flex items-center gap-4 font-bold uppercase text-red-600">
                        Round @NextRace.Round - Upcoming
                        @foreach (var session in orderedSessions)
                        {
                            @if (session != null)
                            {
                                @if (session.SessionTime.Value >= DateTime.Now && session.SessionTime.Value <= DateTime.Now.AddHours(1.5))
                                {
                                    <span class="text-[11px] rounded-md bg-red-700 px-1.5 py-0.5 font-normal capitalize text-white">Live</span>
                                }
                            }
                        }

                    </div>
                    <div class="text-xl font-extrabold uppercase">@NextRace.RaceName <span class="text-xs font-medium capitalize text-gray-400"><span>@NextRace.Circuit.CircuitName</span></span></div>
                    <div class="font-bold">
                        <div class="text-xs font-medium">
                            <span>@NextRace.Circuit.Location.Locality, @NextRace.Circuit.Location.Country</span>
                        </div>
                    </div>
                    <div class="gap-3 text-base font-bold">
                        <div class="flex justify-between gap-1">
                            @foreach (var session in orderedSessions)
                            {
                                @if (session != null)
                                {
                                    <div class="shadow-[6px_10px_12px_1px_#0000004d] bg-opacity-10 flex w-full flex-col gap-1 rounded-lg bg-white p-3">
                                        <div>
                                            @* todo fix animate ping - needs to have a solid color first, then can blink on top of it *@
                                            <span class="flex w-full items-center justify-between text-sm font-bold">
                                                @session.SessionName
                                                @if (session.SessionTime.Value >= DateTime.Now && session.SessionTime.Value <= DateTime.Now.AddHours(1.5))
                                                {
                                                    <div class="w-[5px] h-[5px] justify-center rounded-full bg-red-700">
                                                        <div class="w-[5px] h-[5px] flex animate-ping items-center justify-end rounded-full bg-red-600"></div>
                                                    </div>
                                                }
                                            </span>
                                        </div>
                                        <div class="flex justify-between">
                                            <span class="text-xs font-bold">@session.SessionTime.Value.ToString("ddd d MMM")</span>
                                            <span class="text-xs font-medium">@session.SessionTime.Value.ToString("HH:mm")</span>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
                <div class="flex items-center justify-around rounded-lg">
                    <div>
                        
                    </div>
                    <div class="w-[200px]">
                        <img src="@Circuit" />
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<style>
    img {
        height: 100%;
        width: 100%;
        object-fit: contain;
    }
</style>


@code {

    List<string> cir = new List<string>();
    public RaceMapper.RaceDto NextRace = new RaceMapper.RaceDto();
    private bool isLoading = true;
    private string Circuit = string.Empty;
    string lastSessionDay = null;

    RaceMapper.SessionsDto[]? raceSessions = new RaceMapper.SessionsDto[6];
    List<RaceMapper.SessionsDto> orderedSessions = new List<RaceMapper.SessionsDto>();

    protected override async Task OnInitializedAsync()
    {
        NextRace = await GetNextRace();
        raceSessions = new[] { NextRace.FirstPractice, NextRace.SecondPractice, NextRace.ThirdPractice, NextRace.Qualifying, NextRace.Sprint, NextRace.Race };
        Circuit = GetCircuitMap(NextRace.Circuit.CircuitId, "mini");
        if (NextRace != null)
        {
            orderedSessions = raceSessions.Where(s => s != null && s.Date.HasValue).OrderBy(r => r.Date.Value).ToList();
            isLoading = false;
        }
    }

    private async Task<RaceMapper.RaceDto> GetNextRace()
    {
        var nextRace = await _ergastService.GetNextRace();
        return nextRace;
    }

    private string GetCircuitMap(string circuitId, string type)
    {
        string circuitIdMap = _mapper.GetImageForCircuit(circuitId, type);
        return circuitIdMap;
    }

    //get quali results if there are any
}
