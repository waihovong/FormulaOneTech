@inject FormulaOneTech.Services.Ergast.IErgastService _ergastService;
@using Models.Ergast;
@using FormulaOneTech.Helpers;

<div class="text-[#E4EDF5]">
    @if(isLoading)
    {
        <div>Loading...</div>
    }
    else
    {

        <div class="bg-opacity-60 no-scrollbar overflow-y-auto rounded-lg bg-gray-800 bg-clip-padding p-5 backdrop-blur-lg backdrop-filter">
            <div>@NextRace.RaceName</div>
            <div>@NextRace.Circuit.CircuitName</div>
            <div>@NextRace.Circuit.Location.Locality, @NextRace.Circuit.Location.Country</div>
            <div>@NextRace.SessionTime.Value.ToString("MMMM dd ddd HH:mm")</div>
        </div>
        <div class="bg-red-300">
            <div>
                Practice 1 
            </div>
            <div>
                @NextRace.FirstPractice.SessionTime.Value.ToString("MMMM dd ddd HH:mm")
            </div>
        </div>
        <div class="bg-yellow-300">
            <div>
                Practice 2
            </div>
            <div>
                @NextRace.SecondPractice.SessionTime.Value.ToString("MMMM dd ddd HH:mm")
            </div>
        </div>
        <div class="bg-yellow-300">
            <div>
                Practice 3
            </div>
            <div>
                @NextRace.ThirdPractice.SessionTime.Value.ToString("MMMM dd ddd HH:mm")
            </div>
        </div>
        <div class="bg-yellow-300">
            <div>
                Qualifying
            </div>
            <div>
                @NextRace.Qualifying.SessionTime.Value.ToString("MMMM dd ddd HH:mm")
            </div>
        </div>
        @if (NextRace.Sprint != null)
        {
            <div class="bg-yellow-300">
                <div>
                    Sprint Race
                </div>
                <div>
                    @NextRace.Sprint.SessionTime.Value.ToString("MMMM dd ddd HH:mm")
                </div>
            </div>
        }
    }
</div>


@code {
    //get datetime from today next one
    public RaceMapper.RaceDto NextRace = new RaceMapper.RaceDto();
    private bool isLoading = true;
    protected override async Task OnInitializedAsync()
    {
        NextRace = await GetNextRace();

        if (NextRace != null)
        {
            isLoading = false;
        }
    }

    private async Task<RaceMapper.RaceDto> GetNextRace()
    {
        var nextRace = await _ergastService.GetNextRace();
        return nextRace;
    }

}
