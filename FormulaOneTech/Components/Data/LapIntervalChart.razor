@using Models.Ergast;
@using Plotly.Blazor;
@using Plotly.Blazor.Traces;
@using Plotly.Blazor.LayoutLib;
@if (DriverSelected)
{
    <div class="w-full">
        <PlotlyChart style="height: 25vh; min-height: 350px; border-radius:10px" @bind-Config="config" @bind-Layout="layout" @bind-Data="graph_data" @ref="chart" />
    </div>
}

@code {

    [Parameter]
    public bool DriverSelected { get; set; }

    [Parameter]
    public List<RaceMapper.TimingDto> TimingData { get; set; } = new List<RaceMapper.TimingDto>();

    [Parameter]
    public RaceMapper.LapIntervalDto DriverData { get; set; } = new RaceMapper.LapIntervalDto();

    [Parameter]
    public Dictionary<string, RaceMapper.LapIntervalDto> LapIntervalDataList { get; set; }

    private HashSet<object> ProcessedDriver = new HashSet<object>();

    PlotlyChart chart;
    Config config = new Config()
    {
        Responsive = true,
        ShowAxisDragHandles = false,
        AutoSizable = true,
        ToImageButtonOptions = false,
        Editable = false,
        ShowSendToCloud = false,
        DisplayModeBar = Plotly.Blazor.ConfigLib.DisplayModeBarEnum.False
    };
    Layout layout = new Layout()
    {
        YAxis = new List<YAxis>
        {
            new YAxis
            {
                AutoTypeNumbers = Plotly.Blazor.LayoutLib.YAxisLib.AutoTypeNumbersEnum.ConvertTypes,
                Type = Plotly.Blazor.LayoutLib.YAxisLib.TypeEnum.Category,
                CategoryOrder = Plotly.Blazor.LayoutLib.YAxisLib.CategoryOrderEnum.CategoryAscending,
                NTicks = 4,
                Title = new Plotly.Blazor.LayoutLib.YAxisLib.Title
                {
                    Text = "Lap Time"
                },
                Color = "#ffffff"
            }
        },
        Legend = new List<Legend>
        {
            new Legend
            {
                Font = new Plotly.Blazor.LayoutLib.LegendLib.Font
                {
                    Color = "#ffffff"
                }
            }
        },
        XAxis = new List<XAxis>
        {
            new XAxis
            {
                NTicks = 15,
                Title = new Plotly.Blazor.LayoutLib.XAxisLib.Title
                {
                    Text = "Lap Number"
                },
                Color = "#ffffff"
            }
        },
        HoverMode = HoverModeEnum.XUnified,
        HoverLabel = new HoverLabel
        {
            BgColor = "#ffffff"
        },
        Title = new Title
        {
            Font = new Plotly.Blazor.LayoutLib.TitleLib.Font
            {
                Size = 13,
                Color = "#ffffff"
            }
        },
        PaperBgColor = "rgb(48, 48, 48)",
        PlotBgColor = "rgb(48, 48, 48)"
    };

    private IList<ITrace> graph_data;

    private async Task AddDriverToGraph(object[] xData, string[] yData, string driverId)
    {
        if (chart != null)
        {
            await chart.AddTrace(new Scatter
                {
                    Name = driverId,
                    Mode = Plotly.Blazor.Traces.ScatterLib.ModeFlag.Lines | Plotly.Blazor.Traces.ScatterLib.ModeFlag.Markers,
                    X = xData,
                    Y = yData
                });
            base.OnInitialized();
        }
    }

    /// <summary>
    /// Getting data for the chart
    /// </summary>
    /// <returns></returns>
    protected override async Task OnParametersSetAsync()
    {
        if (LapIntervalDataList.Count > 0)
        {
            var selectedDriver = LapIntervalDataList.Last();

            var initialData = selectedDriver.Value.Timings.Skip(1).Select((timing, index) => new
            {
                lap = index + 2,
                lap_time = timing.Time,
                driver = timing.DriverId
            }).ToList();

            //if initial data populate with the selected driver
            if (graph_data == null)
            {
                //another list to keep track of processed drivers 

                var xData = initialData?.Select(r => (object)r.lap).ToArray();
                var yData = initialData?.Select(r => r.lap_time).ToArray();
                var initialTrace = new Scatter
                {
                    Name = initialData?.Select(r => r.driver).FirstOrDefault(),
                    Mode = Plotly.Blazor.Traces.ScatterLib.ModeFlag.Lines | Plotly.Blazor.Traces.ScatterLib.ModeFlag.Markers,
                    X = xData,
                    Y = yData
                };
                graph_data = new List<ITrace> { initialTrace };
                ProcessedDriver.Add(selectedDriver.Key);
                base.OnInitialized();
            }
            else //if not then populate with other drivers
            {                

                var data = selectedDriver.Value.Timings.Skip(1).Select((timing, index) => new
                {
                    lap = index + 2,
                    lap_time = timing.Time,
                    driver = timing.DriverId
                }).ToList();

                var xAxis = data?.Select(r => (object)r.lap).ToArray();
                var yAxis = data?.Select(r => r.lap_time).ToArray();

                //add the driver to the graph and add them to list 
                if (!ProcessedDriver.Contains(selectedDriver.Key))
                {
                    AddDriverToGraph(xAxis, yAxis, data?.Select(r => r.driver).FirstOrDefault());
                    ProcessedDriver.Add(selectedDriver.Key);
                }
                
            }


        }
    }
}
