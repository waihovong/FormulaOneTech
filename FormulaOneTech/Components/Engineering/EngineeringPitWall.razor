@inject IOpenF1Service _openF1Service;
@using FormulaOneTech.Services.OpenF1;
@using Models.OpenF1;

<div class="w-[550px] text-[#E4EDF5] bg-opacity-60 overflow-y-auto rounded-lg bg-gray-800 bg-clip-padding p-5 backdrop-blur-lg backdrop-filter" style="padding-right:5px" >
    @if (isLoading)
    {
        <div>Loading...</div>
    }
    else
    {
        <div class="mb-2 flex justify-between">
            <div class="mb-2 text-base font-bold">Race Control</div>
            <div class="flex items-center gap-2 text-xs">
                <span>Sort By: </span>
                <button class="bg-[#0000005e] rounded-lg p-2" @onclick="(()=>RaceControlSortByButton())">Most Recent</button>
            </div>
        </div>
        <div class="max-h-[300px] overflow-y-auto overflow-x-hidden">
        @foreach (var racedata in RaceControls)
        {
            <div class="bg-opacity-20 w-[500px] max-w-[500px] bg-[#0000005e] mb-2 flex items-center gap-4 rounded-lg p-2 text-sm font-medium">
                <div class="whitespace-nowrap rounded-lg p-2 text-xs">Lap @racedata.LapNumber</div>
                    <div class="w-full" style="padding-left: 10px; border-left:5px solid @GetFlagStyle(racedata.Flag); border-radius: 0">@racedata.Message</div>
                <div>@racedata?.Date.Value.ToString("H:mm:ss")</div>
            </div>
        }
        </div>
    }
</div>

<style>
    .message-board
    {
        --mask: linear-gradient(to bottom, rgba(0,0,0, 1) 0, rgba(0,0,0, 1) 80%, rgba(0,0,0, 0) 95%, rgba(0,0,0, 0) 0 ) 100% 50% / 100% 100% repeat-x;
        -webkit-mask: var(--mask);
        mask: var(--mask);
    }
</style>

@code {
    [Parameter]
    public DateTime? RaceDate { get; set; }

    public List<Meeting> MeetingKey { get; set; } = new List<Meeting>();
    public List<RaceControl> RaceControls { get; set; } = new List<RaceControl>();
    private bool isLoading = true;

    private int SliderValue { get; set; }
    private List<RaceControl> FilteredRaceControlData { get; set; } = new List<RaceControl>();

    public IEnumerable<dynamic> Categories { get; set; }

    public bool IsSortedMostRecent { get; set; } = true;
    public string SortByButtonText = "Most Recent";

    public Dictionary<string, string> FlagStyle { get; set; } = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase)
    {
        {"green", "#25D51F"},
        {"red", "#D5381C"},
        {"yellow", "#FFC31F"},
        {"blue", "#44AEFF"},
        {"double yellow", "#FF9320"}
    };

    public string GetFlagStyle(string flag)
    {
        if (!string.IsNullOrEmpty(flag) && FlagStyle.ContainsKey(flag.ToLower()))
        {
            return FlagStyle[flag];
        }
        return "transparent";
    }

    private void RaceControlSortByButton()
    {
        IsSortedMostRecent = !IsSortedMostRecent;
        SortByButtonText = IsSortedMostRecent ? "Newest" : "Oldest";
    }

    protected override async Task OnInitializedAsync()
    {
        var latestMeeting = new Dictionary<string, string>
        {
            {"meeting_key", "latest"}
        };

        MeetingKey = await _openF1Service.GetLatestMeetingKey(latestMeeting);

        var raceControl = new Dictionary<string, string>
        {
            {"date", RaceDate.Value.ToString("yyyy-MM-dd")}
        };

        if (RaceDate.HasValue)
        {
            RaceControls = await _openF1Service.GetRaceControlData(raceControl);
            Categories = RaceControls.FindAll(x => x.Category != null).DistinctBy(x => x.Category).ToList();
        }

        if (MeetingKey != null)
        {
            isLoading = false;
        }
    }

    // private void OnSliderValueChanged(int value)
    // {
    //     SliderValue = value;
    //     FilteredRaceControlDataMessages();
    // }

    // private void FilteredRaceControlDataMessages()
    // {
    //     FilteredRaceControlData = RaceControls
    //         .Where(x => x.LapNumber == SliderValue)
    //         .ToList();
    // }
}