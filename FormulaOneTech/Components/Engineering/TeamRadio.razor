@inject FormulaOneTech.Services.OpenF1.IOpenF1Service _openF1Service;
@using Models.Ergast;
@using Models.OpenF1;
@using Whisper.net;
@using Whisper.net.Ggml;

<div class="w-[550px] text-[#E4EDF5] bg-opacity-60 overflow-y-auto rounded-lg bg-gray-800 bg-clip-padding p-5 backdrop-blur-lg backdrop-filter"> 
    @if(isLoading)
    {
        <div>Loading...</div>
    }
    else
    {
        <div class="flex items-center justify-between pb-4">
            <div class="text-base font-bold">Team Radio</div>
            <div class="">
                <span class="text-xs font-medium">Select a driver</span>
                <select @onchange="OnSelectedDriver" class="bg-[#0000005e] text-xs">
                    <option value="">Select a driver</option>
                    @foreach(var driver in DriverList)
                    {
                        <option value="@driver.Driver.PermanentNumber">@driver.Driver.GivenName @driver.Driver.FamilyName</option>
                    }
                </select>
            </div>
        </div>
        @if (loadedDriverAudio)
        {
            <div class="mb-2 flex items-center justify-between text-xs font-semibold">
                <div>
                    <span class="border-l-0 border-t-0 border-b-0 border-4 border-solid border-@DriverTeamId text-center" style="padding-right:6px">Listening to</span>
                    <span style="padding-left:6px;">@DriverFirstName</span> <span class="uppercase">@DriverFamilyName</span> <span>-</span> <span>@DriverTeam</span>
                </div>
                <div class="flex items-center gap-2 text-xs">
                    <span>Sort By: </span>
                    <button class="bg-[#0000005e] rounded-lg p-2 hover:bg-neutral-500" @onclick="(()=>RaceControlSortByButton())">@SortByButtonText</button>
                </div>
            </div>
            <div class="max-h-[300px] flex flex-col overflow-y-auto overflow-x-hidden">
                @foreach(var audioClip in DriverAudio)
                {
                    <div class="bg-[#0000005e] mb-2 flex items-center justify-start rounded-lg p-2">
                        <span class="p-2 text-sm font-semibold" style="min-width:15%">@audioClip.Date.Value.ToString("H:mm:ss")</span>
                        <audio class="w-full" controls src="@audioClip.RecordingUrl"></audio>
                    </div>
                }
            </div>
        }
    }
    
</div>

<style>
    select{
        text-align: center;
        padding: 5px;
        border-radius: 6px;
    }
</style>

@code {
    // [Parameter]
    // public List<Models.Ergast.Driver> Driver { get; set; } = new List<Models.Ergast.Driver>();

    [Parameter]
    public List<Models.Ergast.DriverStandings> DriverList { get; set; } = new List<Models.Ergast.DriverStandings>();

    public List<Models.OpenF1.TeamRadio> DriverAudio { get; set; }

    private bool isLoading = true;
    private bool loadedDriverAudio = false;

    private string DriverFirstName = string.Empty;
    private string DriverFamilyName = string.Empty;
    private string DriverTeam = string.Empty;
    private string DriverTeamId = string.Empty;

    public bool IsSortedMostRecent { get; set; } = true;
    public string SortByButtonText = "Oldest";

    protected override async Task OnParametersSetAsync()
    {
        if (DriverList != null)
        {
            isLoading = false;
        }
        StateHasChanged();
    }

    private void RaceControlSortByButton()
    {
        IsSortedMostRecent = !IsSortedMostRecent;
        SortByButtonText = IsSortedMostRecent ? "Oldest" : "Newest";
        DriverAudio = IsSortedMostRecent ?
            DriverAudio.OrderByDescending(x => x.Date).ToList() :
            DriverAudio.OrderBy(x => x.Date).ToList();
        StateHasChanged();
    }

    private async Task OnSelectedDriver(ChangeEventArgs e)
    {
        var driverNumber = e.Value.ToString();
        DriverAudio = await GetDriverAudio(driverNumber);
        if(DriverAudio != null)
        {
            loadedDriverAudio = true;
            if (DriverList != null)
            {
                DriverFirstName = DriverList?.FirstOrDefault(d => d.Driver?.PermanentNumber == driverNumber)?.Driver?.GivenName!;
                DriverFamilyName = DriverList?.FirstOrDefault(d => d.Driver?.PermanentNumber == driverNumber)?.Driver?.FamilyName!;
                DriverTeam = DriverList?.FirstOrDefault(d => d.Driver?.PermanentNumber == driverNumber)?.Constructors.FirstOrDefault()?.Name!;
                DriverTeamId = DriverList?.FirstOrDefault(d => d.Driver?.PermanentNumber == driverNumber)?.Constructors.FirstOrDefault()?.ConstructorId!;
            }

            StateHasChanged();
        }
    }

    private async Task<List<Models.OpenF1.TeamRadio>> GetDriverAudio(string driverNumber)
    {
        var selectedDriver = new Dictionary<string, string>
        {
            {"session_key", "latest"},
            {"driver_number", driverNumber.ToString()}
        };
        var driverAudio = await _openF1Service.GetDriverRadioAudio(selectedDriver);
        return driverAudio;
    }

}
