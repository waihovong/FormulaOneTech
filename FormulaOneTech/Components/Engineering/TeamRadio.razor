@inject FormulaOneTech.Services.OpenF1.IOpenF1Service _openF1Service;
@using Models.Ergast;
@using Models.OpenF1;
<div class="w-[550px] text-[#E4EDF5] bg-opacity-60 overflow-y-auto rounded-lg bg-gray-800 bg-clip-padding p-5 backdrop-blur-lg backdrop-filter">
    @if(isLoading)
    {
        <div>Loading...</div>
    }
    else
    {
        <div class="flex justify-between">
            <div class="mb-2 text-base font-bold">Team Radio</div>
            <div>Select a driver
                <select @onchange="OnSelectedDriver">
                    @foreach(var driver in Driver)
                    {
                        <option value="@driver.PermanentNumber">@driver.GivenName @driver.FamilyName</option>
                    }
                </select>
            </div>
        </div>
        @if (loadedDriverAudio)
        {
            <div class="flex flex-col gap-4">
                @foreach(var audioClip in DriverAudio)
                {
                    <span>@audioClip.Date.Value.ToString("H:mm")</span>
                    <audio controls src="@audioClip.RecordingUrl"></audio>
                }
            </div>
        }

        <div class="header-sign">
            <div class="dropdown" id="toggleDropdown">
                <button @onclick="Show" @onblur="Hide" class="button-md" type="button">
                    <i data-feather="user"></i>
                    <span>Personal cab</span>
                </button>
                <ul class="dropdown-list @(isActive ? "is-active" : "")">
                    <li class="dropdown-item">
                        <a class="dropdown-link" href="/cabinet">
                            <p class="text-md">Cabinet</p>
                        </a>
                    </li>
                    <li class="dropdown-item">
                        <a @onclick="LogOutAsync" class="dropdown-link" href="">
                            <p class="text-md">LogOut</p>
                        </a>
                    </li>
                </ul>
            </div>
        </div>

    }
    
</div>

@code {
    [Parameter]
    public List<Models.Ergast.Driver> Driver { get; set; } = new List<Models.Ergast.Driver>();

    public List<Models.OpenF1.TeamRadio> DriverAudio { get; set; }

    private bool isLoading = true;
    private bool loadedDriverAudio = false;
    protected override async Task OnParametersSetAsync()
    {
        if (Driver != null)
        {
            isLoading = false;
        }
        StateHasChanged();
    }
    private async Task LogOutAsync()
    {

    }

    private bool isActive = false;

    private void Show()
    {
        isActive = true;
    }

    private void Hide()
    {
        isActive = false;
    }

    private async Task OnSelectedDriver(ChangeEventArgs e)
    {
        var driverNumber = e.Value.ToString();
        DriverAudio = await GetDriverAudio(driverNumber);
        if(DriverAudio != null)
        {
            loadedDriverAudio = true;
            StateHasChanged();
        }
    }

    private async Task<List<Models.OpenF1.TeamRadio>> GetDriverAudio(string driverNumber)
    {
        var selectedDriver = new Dictionary<string, string>
        {
            {"session_key", "latest"},
            {"driver_number", driverNumber.ToString()}
        };
        var driverAudio = await _openF1Service.GetDriverRadioAudio(selectedDriver);
        return driverAudio;
    }

}
