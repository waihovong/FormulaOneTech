@inject FormulaOneTech.Services.Ergast.IErgastService _ergastService;
@using Models.Ergast;
<h3 class="text-[#E4EDF5] text-xl font-bold italic">Formula 1 Technical</h3>

@if(isLoading)
{
    <p>Loading</p>
}
else
{
    <div class="flex gap-4">
        <div class="flex flex-col gap-4">
            <div>
                <FormulaOneTech.Components.Drivers.DriverStandings/>
            </div>
            <div class="">
                <FormulaOneTech.Components.Constructors.ConstructorStandings/>
            </div>
        </div>
        <div class="flex w-full flex-col gap-4 text-white">
            <div>
                <FormulaOneTech.Components.Race.Race/>
            </div>
            <div>
                <button @onclick="(() => ResultsViewHandler(1))" class=" border-l-0 border-r-0 border-t-0"> <span class="hover:text-fuchsia-600">Race Results</span></button>
                <button @onclick="(() => ResultsViewHandler(2))" class=" border-l-0 border-r-0 border-t-0"> <span class="hover:text-fuchsia-600">Engineering Pitwall</span></button>
            </div>
            <div class="flex w-full">
                @if (ResultsView == 1)
                {
                    <div class="w-full">
                        <FormulaOneTech.Components.Race.PreviousRace PreviousRaceDate="@HandlePreviousRaceDate" />
                    </div>
                }
                else if (ResultsView == 2)
                {
                    <div class="bg-opacity-60 w-full overflow-y-auto rounded-lg bg-gray-800 bg-clip-padding p-5 backdrop-blur-lg backdrop-filter">
                        <FormulaOneTech.Components.Engineering.EngineeringPitWall RaceDate="PreviousRaceDateTime" />
                    </div>
                }
            </div>
        </div>
    </div>
}


@code {
    public List<Models.Ergast.DriverStandings> Drivers { get; set; }

    private bool isLoading = true;

    private int ResultsView = 1;

    public EventCallback<DateTime?> PreviousRaceDate { get; set; }

    public DateTime? PreviousRaceDateTime { get; set; }
    protected override async Task OnInitializedAsync()
    {
        isLoading = false;
    }

    private void ResultsViewHandler(int resultsView)
    {
        ResultsView = resultsView;
    }

    private void HandlePreviousRaceDate(DateTime? date)
    {
        PreviousRaceDateTime = date;
    }
}